 *** Begin Patch
 *** Update File: main.js
 @@
  // 事業者名ラベルと各社の追跡ページURL
  // 郵便局（ゆうパック等）を追加サポート
  const carrierLabels = {
 @@
    sagawa:  "佐川急便"
  };
  const carrierUrls = {
 @@
    sagawa:  "https://k2k.sagawa-exp.co.jp/p/web/okurijosearch.do?okurijoNo="
  };
 
 // ---------------------------------------------------------------------------
 // 固定キャリアの前回選択値を保持し、変更時に既存行の<select>値を更新するための変数
 // （追加画面用と詳細画面用で別々に保持します）
 let prevFixedCarrierValueAdd    = "";
 let prevFixedCarrierValueDetail = "";
 
 /**
  * 行の<select>に設定されたキャリアを更新します。
  * context: 'add' なら追加画面の trackingRows、'detail' なら案件詳細画面の detailTrackingRows。
  * prevVal: 以前の固定キャリア値（空文字の場合は未選択を意味）。
  * newVal:  新しい固定キャリア値。
  *
  * 前回の固定キャリア値だった行、または未選択の行を新しい値に置き換えます。
  */
 function updateFixedCarrierRows(context, prevVal, newVal) {
   const container = (context === "detail") ? detailTrackingRows : trackingRows;
   if (!container) return;
   container.querySelectorAll(".tracking-row select").forEach(sel => {
     if (sel.value === prevVal || !sel.value) {
       sel.value = newVal;
     }
   });
 }
 
 *** End Patch
 *** Begin Patch
 *** Update File: main.js
 @@ // 詳細側
 -if (fixedCarrierCheckboxDetail) {
 -  fixedCarrierCheckboxDetail.onchange = () => {
 -    fixedCarrierSelectDetail.style.display = fixedCarrierCheckboxDetail.checked ? "inline-block" : "none";
 -    applyFixedToUnselectedRows("detail");
 -  };
 -}
 -if (fixedCarrierSelectDetail) {
 -  fixedCarrierSelectDetail.onchange = () => {
 -    if (!fixedCarrierCheckboxDetail.checked) return;
 -    applyFixedToUnselectedRows("detail");
 -  };
 -}
 +if (fixedCarrierCheckboxDetail) {
 +  fixedCarrierCheckboxDetail.onchange = () => {
 +    fixedCarrierSelectDetail.style.display =
 +      fixedCarrierCheckboxDetail.checked ? "inline-block" : "none";
 +    // チェックON時は空欄行を新しい固定キャリアで補完し、前回値を更新
 +    if (fixedCarrierCheckboxDetail.checked) {
 +      const newVal = fixedCarrierSelectDetail.value || "";
 +      updateFixedCarrierRows('detail', "", newVal);
 +      prevFixedCarrierValueDetail = newVal;
 +    }
 +  };
 +}
 +if (fixedCarrierSelectDetail) {
 +  fixedCarrierSelectDetail.onchange = () => {
 +    if (!fixedCarrierCheckboxDetail.checked) return;
 +    const newVal = fixedCarrierSelectDetail.value || "";
 +    // 前回の固定キャリア値または空欄行を新しい値に置き換える
 +    updateFixedCarrierRows('detail', prevFixedCarrierValueDetail, newVal);
 +    prevFixedCarrierValueDetail = newVal;
 +  };
 +}
 @@ // 追加画面側（同じロジック）
 -if (fixedCarrierCheckbox) {
 -  fixedCarrierCheckbox.onchange = () => {
 -    fixedCarrierSelect.style.display = fixedCarrierCheckbox.checked ? "block" : "none";
 -    try{ ensureFixedCarrierToolbar('add'); }catch(_){}
 -    applyFixedToUnselectedRows("add");
 -  };
 -}
 -if (fixedCarrierSelect) {
 -  fixedCarrierSelect.onchange = () => {
 -    if (!fixedCarrierCheckbox.checked) return;
 -    applyFixedToUnselectedRows("add");
 -  };
 -}
 +if (fixedCarrierCheckbox) {
 +  fixedCarrierCheckbox.onchange = () => {
 +    fixedCarrierSelect.style.display =
 +      fixedCarrierCheckbox.checked ? "block" : "none";
 +    try { ensureFixedCarrierToolbar('add'); } catch (_) {}
 +    // チェックON時は空欄行を新しい固定キャリアで補完し、前回値を更新
 +    if (fixedCarrierCheckbox.checked) {
 +      const newVal = fixedCarrierSelect.value || "";
 +      updateFixedCarrierRows('add', "", newVal);
 +      prevFixedCarrierValueAdd = newVal;
 +    }
 +  };
 +}
 +if (fixedCarrierSelect) {
 +  fixedCarrierSelect.onchange = () => {
 +    if (!fixedCarrierCheckbox.checked) return;
 +    const newVal = fixedCarrierSelect.value || "";
 +    // 前回の固定キャリア値または空欄行を新しい値に置き換える
 +    updateFixedCarrierRows('add', prevFixedCarrierValueAdd, newVal);
 +    prevFixedCarrierValueAdd = newVal;
 +  };
 +}
 
 *** End Patch
 *** Begin Patch
 *** Update File: main.js
 @@
  function renumberTrackingRows(context="add"){
 @@
  }
 
 /**
  * detailShipmentsUl 内の <li> リストを上から順に 1, 2, 3 … と番号振り直す。
  * <a> のテキストは「1：ヤマト運輸：123456789…」のように全角コロンで区切られているため、
  * 先頭の番号部分を順番に置き換えるだけでステータスや日時部分はそのまま維持できる。
  */
 function renumberDetailShipments() {
   if (!detailShipmentsUl) return;
   const items = Array.from(detailShipmentsUl.children);
   let seq = 1;
   items.forEach(li => {
     const a = li.querySelector('a');
     if (!a) return;
     const parts = (a.textContent || '').split('：');
     if (parts.length > 1) {
       parts[0] = String(seq++);
       a.textContent = parts.join('：');
     }
   });
 }
 
 *** End Patch
 *** Begin Patch
 *** Update File: main.js
 @@ async function showCaseDetail(orderId, obj){
 -    if (pending.length) await Promise.allSettled(pending);
 +    if (pending.length) await Promise.allSettled(pending);
 +    // ステータス取得完了後、上から順に連番を振り直す
 +    renumberDetailShipments();
 *** End Patch
 *** Begin Patch
 *** Update File: main.js
 @@ confirmDetailAddBtn.onclick = async () => {
 -      if (pending.length) await Promise.allSettled(pending);
 +      if (pending.length) await Promise.allSettled(pending);
 +      // 追加完了後にリストの番号を振り直す
 +      renumberDetailShipments();
 *** End Patch
*** End Patch